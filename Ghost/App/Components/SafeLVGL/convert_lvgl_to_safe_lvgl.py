#! /usr/bin/python3
import os
import re

lvgl_path = "../../../ThirdParty/lvgl"
safe_lvgl_path = "./"

regex = r"^(?P<return_type>\w{1}.+)[ ]{1}(?P<function_name>(lv_){1}.+)(\((?P<var_list>.+)\);)"
pattern = re.compile(regex, re.X)
#r"(?!.*[\|#|/|\\|@|{|}])(?!.*return)^[\S]+[ ]*[\S]*(lv_){1}.+(\(){1}.*(\);){1}"

def find_lv_function_declare(code : str):
    """
        @brief: Find whether a single line of code contains a function declaration.
        @param: code: A single line of code.
        @return: Function declaration is returned when a function declaration is included; otherwise, none is returned.
    """
    ret = pattern.match(code)
    if(ret != None):
        # match function type and etc.
        return_type = ret.group("return_type")
        function_name = ret.group("function_name")
        var_list = ret.group("var_list")
        return return_type, function_name, var_list
    else:
        return None


def get_function_params(var_list : list):
    """
        @brief: Get function parameters.
        @param: var_list: A list of parameters in string.
        @return: A list of parameters.
    """
    if(var_list == "void"):
        return []
    else:
        params = []
        for var in var_list.split(","):
            param = var.strip().split(" ")
            param = param[len(param) - 1]
            if(param == "..."):
                param = "##__VAR__ARGS__##"
            params.append(param)
        return params


def get_lv_function_notes(function_line_id : int, code : str) -> str:
    pass

def main(lvgl_path : str, safe_lvgl_path : str):
    """
    """

    function_count = 0
    # Traversal header file.
    for parent, dirnames, filenames in os.walk(lvgl_path):  
        for filename in filenames:
            ext = os.path.splitext(filename)[1][1:]
            if ext =="h":
                source_header_file = open(os.path.join(parent, filename), 'r')
                line_id = 0

                output_header_path = os.path.join(safe_lvgl_path, os.path.relpath(parent, lvgl_path), "safe_" + filename)
                output_source_path = output_header_path[: len(output_header_path) - 2] + ".c"
                if(not os.path.exists(os.path.dirname(output_header_path))):
                    os.makedirs(os.path.dirname(output_header_path))
                if(not os.path.exists(os.path.dirname(output_source_path))):
                    os.makedirs(os.path.dirname(output_source_path))
                output_header_file = open(output_header_path, 'w')
                output_header_file.write("//This file is automatically generated.\n//The original file is " + filename + "\n")
                output_header_file.write("#include \"" + filename + "\"\n\n")
                
                output_source_file = open(output_source_path, 'w')
                output_source_file.write("//This file is automatically generated.\n//The original file is " + filename + "\n")
                output_source_file.write("#include \"GhostSafeLVGL.h\"\n")
                output_source_file.write("#include \"safe_" + filename + "\"\n\n")

                while True:
                    code = source_header_file.readline()
                    line_id += 1
                    if(code):
                        code = code.strip()
                        func_declare = find_lv_function_declare(code)
                        if(func_declare):
                            function_count += 1
                            return_type = func_declare[0]
                            function_name = func_declare[1]
                            var_list = func_declare[2]
                            # Output identification results.
                            print("Found %d function declarations." % function_count)
                            print("Find function declare in file: " + filename + " at line: " + str(line_id))
                            
                            print("> Function name: " + function_name)
                            print("> Function var list: " + var_list)
                            print("> Function return type: " + return_type)
                            params = get_function_params(var_list)
                            print("> Function params: " + str(params))
                            print("> Source code: " + code)
                            print("")

                            # convert to safe lvgl.
                            print("Convert to safe_lvgl:")
                            safe_function_name = "safe_" + function_name
                            safe_params = ""
                            for index in range(len(params)):
                                if(index == 0):
                                    safe_params += params[index]
                                else:
                                    safe_params += ", " + params[index]

                            safe_lv_declare = return_type + " " + safe_function_name + r"(" + var_list + r");"
                            print("> Function declare: " + safe_lv_declare)
                            print("> Function params: " + safe_params)

                            # Generate safe lvgl.
                            ## Generate header.
                            ## TODO: Generate comments in header file.
                            output_header_file.writelines([
                                "//The original function is: " + function_name + ".\n", 
                                safe_lv_declare + "\n\n"]
                            )

                            ## Generate source.
                            if(return_type == "void"):
                                output_source_file.writelines([
                                    "//The original function is: " + function_name + ".\n",
                                    return_type + " " + safe_function_name + "(" + var_list + ")\n",
                                    "{\n",
                                    "    GhostLV_Lock();\n",
                                    "    " + function_name + "(" + safe_params + ");\n",
                                    "    GhostLV_Unlock();\n",
                                    "}\n\n"
                                ])
                            else:
                                output_source_file.writelines([
                                    "//The original function is: " + function_name + ".\n",
                                    return_type + " " + safe_function_name + "(" + var_list + ")\n",
                                    "{\n",
                                    "    GhostLV_Lock();\n",
                                    "    " + return_type + " ret = " + function_name + "(" + safe_params + ");\n",
                                    "    GhostLV_Unlock();\n",
                                    "    return ret;\n",
                                    "}\n\n"
                                ])

                            print("........................................................................")
                            pass
                    else:
                        break

                source_header_file.close()
                output_header_file.close()
                output_source_file.close()


if(__name__ == "__main__"):
    print("[Warring] This tool is only passes the test on lvgl8.2.")
    main(lvgl_path, safe_lvgl_path)
